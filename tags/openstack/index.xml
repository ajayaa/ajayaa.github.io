<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openstack on Ajaya&#39;s blog</title>
    <link>ajayaa.github.io/tags/openstack/</link>
    <description>Recent content in Openstack on Ajaya&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="ajayaa.github.io/tags/openstack/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How Neutron works</title>
      <link>/ajayaa.github.io/how-neutron-works/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/ajayaa.github.io/how-neutron-works/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a long time since I last posted in my blog. Anyway here is one describing
the internals of Neutron with overlay network. You would be able to get most out of this post
if you have a Openstack setup with neutron described in my previous &lt;a href=&#34;http://&#34;&gt;post&lt;/a&gt;.
There are a number of components which are used in Neutron to give you a software defined
networking.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenVSwitch&lt;/li&gt;
&lt;li&gt;Overlay Network using GRE or VXLAN tunneling&lt;/li&gt;
&lt;li&gt;Linux network namespaces&lt;/li&gt;
&lt;li&gt;Linux bridges&lt;/li&gt;
&lt;li&gt;Veth pair&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;openvswitch:3165180092f9d35e86f15071f44ebed9&#34;&gt;OpenVSwitch&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a soft virtual switch which supports Openflow rules. It is most commonly
used with hypervisors. It is one of the critical pieces in an SDN solution. If
you are hearing about OpenVswitch for the first time then watch this &lt;a href=&#34;https://www.youtube.com/watch?v=rYW7kQRyUvA&#34;&gt;video&lt;/a&gt;
to learn more about it.&lt;/p&gt;

&lt;h3 id=&#34;overlay-network:3165180092f9d35e86f15071f44ebed9&#34;&gt;Overlay Network&lt;/h3&gt;

&lt;p&gt;If you have a data center wherein your nodes are in different subnets then how do
you connect your vms in those nodes? The answer to this question is overlay networks.
An overlay network is built using tunneling. The tunnel could of type GRE or VXLAN.
When a vm in one node wants to send a packet to vm in another node, the openvswitch
encapsulates the packet with ip address of the node as an udp packet. Here is an
image of packet which is sent. Learn more about overlay &lt;a href=&#34;https://www.youtube.com/watch?v=Jqm_4TMmQz8&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&#34;ajayaa.github.io/img/vxlan.png&#34;&gt;&lt;img src=&#34;ajayaa.github.io/img/vxlan.png&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;Packet flow&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;linux-network-namespaces:3165180092f9d35e86f15071f44ebed9&#34;&gt;Linux network namespaces&lt;/h3&gt;

&lt;p&gt;You must have heard about namespaces in programming languages. They are used to
isolate variable names in different packages/libraries. So now think what could
be the variables in a network namespace in context of a operating system. You
guessed it right: &lt;code&gt;interfaces&lt;/code&gt;, &lt;code&gt;routes&lt;/code&gt;, &lt;code&gt;iptables&lt;/code&gt;. The important thing to note
here is you can set a namespace as the primary namespace for a process in Linux.
To learn more about network namespaces, head over to &lt;a href=&#34;http://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;linux-bridge:3165180092f9d35e86f15071f44ebed9&#34;&gt;Linux bridge&lt;/h3&gt;

&lt;p&gt;They are an age old concept. You can connect two interfaces using a linux bridge basically.
To learn more about it go &lt;a href=&#34;http://google.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;veth-pair:3165180092f9d35e86f15071f44ebed9&#34;&gt;Veth pair&lt;/h3&gt;

&lt;p&gt;A veth pair is a tube basically. What goes in from one side comes out of the other side.&lt;/p&gt;

&lt;h2 id=&#34;what-happens-when-you-create-a-network:3165180092f9d35e86f15071f44ebed9&#34;&gt;What happens when you create a network&lt;/h2&gt;

&lt;p&gt;A namespace corresponding to this network is created in the network node or wherever
the neutron service is running. A dnsmasq process is started and attached to this
namespace. Whenver a vm uses an address from this network to boot up, the dnsmasq
process acts as a DHCP server and hands out an ip address to the vm.&lt;/p&gt;

&lt;h2 id=&#34;what-happens-when-you-boot-a-machine:3165180092f9d35e86f15071f44ebed9&#34;&gt;What happens when you boot a machine&lt;/h2&gt;

&lt;p&gt;A tap interface for the vm is created which gets an ip address from the dnsmasq
process. A linux bridge and a veth pair is also created. One end of the veth pair
and tap interface get connected with linux bridge. The other end of veth pair is
attached to an ovs-bridge. The bridge is commonly named as br-int(integration bridge).&lt;/p&gt;

&lt;h2 id=&#34;what-happens-when-you-create-an-external-network:3165180092f9d35e86f15071f44ebed9&#34;&gt;What happens when you create an external network&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Devstack multinode with neutron and vagrant</title>
      <link>/ajayaa.github.io/neutron-multinode-devstack/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/ajayaa.github.io/neutron-multinode-devstack/</guid>
      <description>

&lt;p&gt;In this post I am going to share my experience of running neutron multinode with devstack. I am assuming that you are familiar with openstack, devstack and vagrant. If not I advise you to learn at least about openstack and come back here when you feel comfortable with different components of openstack. I created three vms to do the experiment. The most useful thing I learnt from this experiment is how external network in neutron works.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;node1 (controller+compute)&lt;/li&gt;
&lt;li&gt;node2 (compute)&lt;/li&gt;
&lt;li&gt;node3 (access)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;a href=&#34;ajayaa.github.io/img/neutron.jpg&#34;&gt;&lt;img src=&#34;ajayaa.github.io/img/neutron.jpg&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;Conceptual diagram &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;vagrantfile:b4f2e633cf0e32d8c5d2ea1adc46e9ef&#34;&gt;Vagrantfile&lt;/h3&gt;

&lt;p&gt;Here is how
my Vagrantfile looks like: &lt;a href=&#34;https://github.com/ajayaa/devstack-neutron-multinode/blob/master/Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;
As you can see I have two interfaces attached to each of the vm. The first interface eth1 serves as management network + data network in both node1 and node2. The eth2 interface serves as the external network in this deployment. The eth2 interface in access node is used to ssh into vms created with openstack.&lt;/p&gt;

&lt;h3 id=&#34;local-conf:b4f2e633cf0e32d8c5d2ea1adc46e9ef&#34;&gt;local.conf&lt;/h3&gt;

&lt;p&gt;Here is how local.conf file looks like in node1: &lt;a href=&#34;https://github.com/ajayaa/devstack-neutron-multinode/blob/master/local.conf.controller&#34;&gt;local.conf&lt;/a&gt;. If you are not behind a proxy please remove the variables http_proxy and https_proxy from local.conf.  Usually I run a squid proxy locally to cache packages so that I won&amp;rsquo;t have to fetch packages from internet everytime I run devstack.
Similarly local.conf file in compute node looks like: &lt;a href=&#34;https://github.com/ajayaa/devstack-neutron-multinode/blob/master/local.conf.compute&#34;&gt;local.conf&lt;/a&gt;. The only thing extra added here is SERVICE_HOST variable. This should point to the ip address where your controller node is running.&lt;/p&gt;

&lt;h3 id=&#34;after-running-stack-sh-with-above-local-conf-setting-in-node1:b4f2e633cf0e32d8c5d2ea1adc46e9ef&#34;&gt;After running stack.sh with above local.conf setting in node1&lt;/h3&gt;

&lt;p&gt;Go to your controller node. See the bridges created by openvswitch with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo ovs-vsctl show 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that three bridges are created by devstack for you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;br-int&lt;/li&gt;
&lt;li&gt;br-tun&lt;/li&gt;
&lt;li&gt;br-ex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now to use eth2 subnet range as external ip we need to attach eth2 interface to br-ex bridge. Do it by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudo ovs-vsctl add-port br-ex eth2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add security group rules to allow icmp and ssh into vms.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
    nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now boot a vm using nova boot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    nova boot --flavor m1.nano --image &amp;lt;image_id&amp;gt; --nic net-id=&amp;lt;subnet_id associated with private network&amp;gt; inst1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a floating-ip and attach it to the vm created above. To do that get the port-id associated with the ip address assigned to the vm. The commands to use are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    neutron port-list
    neutron floatingip-create
    neutron floatingip-associate &amp;lt;port_id&amp;gt; &amp;lt;floatingip_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now login to your access node. You should be able to ping inst1(vm created by openstack) using the floatingip assigned to it. You should also be able to ssh into the machine. Go ahead and log into the inst1. You won&amp;rsquo;t be able to access internet from inst1. To do that you need to masquerade the traffic coming from the eth2 interface of node1(controller node). Find out which interface in your laptop corresponds to eth2 in controller node. Then run the following comands in your laptop. (Assuming the interface is vboxnet5 and wlan0 is connected to internet)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # The out interface for masquerading
    iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE
    # Forward from vboxnet5
    sudo iptables --append FORWARD --in-interface vboxnet5 -j ACCEPT

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try to ping google.com. If you are unable to do so, open /etc/resolv.conf and change nameserver to 8.8.8.8 . If you have gone through above steps correctly, you should be able to access internet from the vm created by openstack.&lt;/p&gt;

&lt;h3 id=&#34;what-about-node2:b4f2e633cf0e32d8c5d2ea1adc46e9ef&#34;&gt;What about node2?&lt;/h3&gt;

&lt;p&gt;You can bring your node2 up anytime after you have a running node1. Things run very smooth when you add a compute node which is quite surprising  ;) .&lt;/p&gt;

&lt;h3 id=&#34;what-happens-behind-the-scenes:b4f2e633cf0e32d8c5d2ea1adc46e9ef&#34;&gt;What happens behind the scenes&lt;/h3&gt;

&lt;p&gt;By default devstack uses vxlan to provide L2 connectivity to vms in the same subnet. It creates a private network called private with subnet-range 10.0.0.0/24 and a public network with range 192.168.200.0/24. It creates a router called router and attaches the above private network as one of the interface and sets gateway with one of the ip addresses from the public range. The gateway set for this range of public address is by default 192.168.200.1 . In this it resides in your laptop or the machine in which you created node1, node2, node3.&lt;/p&gt;

&lt;h4 id=&#34;known-issues:b4f2e633cf0e32d8c5d2ea1adc46e9ef&#34;&gt;Known Issues&lt;/h4&gt;

&lt;p&gt;Even after adding security group rule to allow ssh traffic to your vm, you won&amp;rsquo;t be able to ssh into cirros vm&amp;rsquo;s in compute node.
&lt;a href=&#34;https://ask.openstack.org/en/question/30502/can-ping-vm-instance-but-cant-ssh-ssh-command-halts-with-no-output/&#34;&gt;Solution&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-does-neutron-work:b4f2e633cf0e32d8c5d2ea1adc46e9ef&#34;&gt;How does neutron work&lt;/h3&gt;

&lt;p&gt;I will leave this for another blog post. You can find all the files used and conf files assoicated with nova and neutrona at &lt;a href=&#34;https://github.com/ajayaa/devstack-neutron-multinode/&#34;&gt;devstack-neutron-multinode&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Devstack</title>
      <link>/ajayaa.github.io/devstack/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/ajayaa.github.io/devstack/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://github.com/ajayaa/devstack-novan-multihost&#34;&gt;Path to conf files&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>